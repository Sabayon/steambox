#!/usr/bin/python
# -*- coding: utf-8 -*-
"""

    @author: Fabio Erculiani <lxnay@sabayon.org>
    @contact: lxnay@sabayon.org
    @copyright: Fabio Erculiani
    @license: GPL-3

    B{Entropy Package Manager Rigo Daemon}.

"""
import sys
import logging
import os
import subprocess

import dbus
import dbus.service
import dbus.mainloop.glib

from gi.repository import GLib, GObject


class Service(dbus.service.Object):

    BUS_NAME = "org.freedesktop.ConsoleKit"
    BUS_INTERFACE = BUS_NAME + ".Manager"
    OBJECT_PATH ="/org/freedesktop/ConsoleKit/Manager"

    def __init__(self):
        object_path = self.OBJECT_PATH
        dbus_loop = dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        system_bus = dbus.SystemBus(mainloop=dbus_loop)
        self._bus = system_bus
        name = dbus.service.BusName(self.BUS_NAME,
                                    bus=system_bus)
        dbus.service.Object.__init__(self, name, object_path)

    @dbus.service.method(BUS_INTERFACE)
    def Restart(self):
        sys.stderr.write("SteamBox ConsoleKit Service, Restart() called\n")
        sys.stderr.flush()
        subprocess.call(["/sbin/reboot"])

    @dbus.service.method(BUS_INTERFACE)
    def Stop(self):
        sys.stderr.write("SteamBox ConsoleKit Service, Restart() called\n")
        sys.stderr.flush()
        subprocess.call(["/sbin/halt"])

if __name__ == "__main__":
    try:
        daemon = Service()
    except dbus.exceptions.DBusException as err:
        logging.exception(err)
        raise SystemExit(1)

    GLib.threads_init()
    main_loop = GObject.MainLoop()
    try:
        main_loop.run()
    except KeyboardInterrupt:
        raise SystemExit(1)
    raise SystemExit(0)
